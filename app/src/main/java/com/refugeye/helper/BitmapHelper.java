package com.refugeye.helper;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Locale;

import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.Color;
import android.provider.MediaStore;
import android.util.Log;

public class BitmapHelper {

    private static final String TAG = "BitmapHelper";

    /**
     * Trim bitmap by cropping around first used pixels
     *
     * @param source Bitmap
     *
     * @return Bitmap
     */
    public static Bitmap trimBitmap(Bitmap source) {

        int firstX = 0, firstY = 0;
        int lastX = source.getWidth();
        int lastY = source.getHeight();
        int[] pixels = new int[source.getWidth() * source.getHeight()];
        source.getPixels(pixels, 0, source.getWidth(), 0, 0, source.getWidth(), source.getHeight());
        loop:
        for (int x = 0; x < source.getWidth(); x++) {
            for (int y = 0; y < source.getHeight(); y++) {
                if (pixels[x + (y * source.getWidth())] != Color.TRANSPARENT) {
                    firstX = x;
                    break loop;
                }
            }
        }
        loop:
        for (int y = 0; y < source.getHeight(); y++) {
            for (int x = firstX; x < source.getWidth(); x++) {
                if (pixels[x + (y * source.getWidth())] != Color.TRANSPARENT) {
                    firstY = y;
                    break loop;
                }
            }
        }
        loop:
        for (int x = source.getWidth() - 1; x >= firstX; x--) {
            for (int y = source.getHeight() - 1; y >= firstY; y--) {
                if (pixels[x + (y * source.getWidth())] != Color.TRANSPARENT) {
                    lastX = x;
                    break loop;
                }
            }
        }
        loop:
        for (int y = source.getHeight() - 1; y >= firstY; y--) {
            for (int x = source.getWidth() - 1; x >= firstX; x--) {
                if (pixels[x + (y * source.getWidth())] != Color.TRANSPARENT) {
                    lastY = y;
                    break loop;
                }
            }
        }
        Log.i(TAG, "x: " + firstX + "; y: " + firstY + "; width: " + (lastX - firstX) + "; height: " + (lastY - firstY));
        return Bitmap.createBitmap(source, firstX, firstY, lastX - firstX, lastY - firstY);
    }

    /**
     * Resize bitmap
     *
     * @param source Bitmap
     * @param maxWidth float
     * @param maxHeight float
     *
     * @return Bitmap
     */
    public static Bitmap resizeBitmap(Bitmap source, int maxWidth, int maxHeight) {

        if (maxWidth <= 0 || maxHeight <= 0) {
            return source;
        }

        float ratioBitmap = (float) source.getWidth() / (float) source.getHeight();
        float ratioMax = (float) maxWidth / (float) maxHeight;

        int finalWidth = maxWidth;
        int finalHeight = maxHeight;
        if (ratioMax > ratioBitmap) {
            finalWidth = (int) ((float) maxHeight * ratioBitmap);
        } else {
            finalHeight = (int) ((float) maxWidth / ratioBitmap);
        }
        return Bitmap.createScaledBitmap(source, finalWidth, finalHeight, true);
    }

    /**
     * Save bitmap to gallery
     *
     * @param context Context
     * @param bitmap Bitmap
     */
    public static void saveToGallery(Context context, Bitmap bitmap) {

        SimpleDateFormat simpleDateFormat = new SimpleDateFormat("ddMMyyyyHHmmss", Locale.getDefault());
        Date date = new Date();

        // Save to file
        String title = "Generated by Refugeye";
        String desc = "Saved on: " + simpleDateFormat.format(date);
        MediaStore.Images.Media.insertImage(context.getContentResolver(), bitmap, title, desc);
    }
}
